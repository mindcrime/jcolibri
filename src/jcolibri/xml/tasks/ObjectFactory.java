//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.09.17 at 10:12:57 CEST 
//

package jcolibri.xml.tasks;

import javax.xml.bind.JAXBException;
import javax.xml.bind.PropertyException;

/**
 * This object contains factory methods for each Java content interface and Java
 * element interface generated in the jcolibri.xml.tasks package.
 * <p>
 * An ObjectFactory allows you to programatically construct new instances of the
 * Java representation for XML content. The Java representation of XML content
 * can consist of schema derived interfaces and classes representing the binding
 * of schema type definitions, element declarations and model groups. Factory
 * methods for each of these are provided in this class.
 * 
 */
public class ObjectFactory extends com.sun.xml.bind.DefaultJAXBContextImpl {

	private static java.util.HashMap defaultImplementations = new java.util.HashMap();

	static {
		defaultImplementations.put((jcolibri.xml.tasks.TaskType.class),
				(jcolibri.xml.tasks.impl.TaskTypeImpl.class));
		defaultImplementations.put((jcolibri.xml.tasks.Tasks.class),
				(jcolibri.xml.tasks.impl.TasksImpl.class));
		defaultImplementations.put((jcolibri.xml.tasks.Task.class),
				(jcolibri.xml.tasks.impl.TaskImpl.class));
		defaultImplementations.put((jcolibri.xml.tasks.TasksType.class),
				(jcolibri.xml.tasks.impl.TasksTypeImpl.class));
	}

	/**
	 * Create a new ObjectFactory that can be used to create new instances of
	 * schema derived classes for package: jcolibri.xml.tasks
	 * 
	 */
	public ObjectFactory() {
		super(new jcolibri.xml.tasks.ObjectFactory.GrammarInfoImpl());
	}

	/**
	 * Create an instance of the specified Java content interface.
	 * 
	 * @param javaContentInterface
	 *            the Class object of the javacontent interface to instantiate
	 * @return a new instance
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public java.lang.Object newInstance(java.lang.Class javaContentInterface)
			throws javax.xml.bind.JAXBException {
		return super.newInstance(javaContentInterface);
	}

	/**
	 * Get the specified property. This method can only be used to get provider
	 * specific properties. Attempting to get an undefined property will result
	 * in a PropertyException being thrown.
	 * 
	 * @param name
	 *            the name of the property to retrieve
	 * @return the value of the requested property
	 * @throws PropertyException
	 *             when there is an error retrieving the given property or value
	 */
	public java.lang.Object getProperty(java.lang.String name)
			throws javax.xml.bind.PropertyException {
		return super.getProperty(name);
	}

	/**
	 * Set the specified property. This method can only be used to set provider
	 * specific properties. Attempting to set an undefined property will result
	 * in a PropertyException being thrown.
	 * 
	 * @param name
	 *            the name of the property to retrieve
	 * @param value
	 *            the value of the property to be set
	 * @throws PropertyException
	 *             when there is an error processing the given property or value
	 */
	public void setProperty(java.lang.String name, java.lang.Object value)
			throws javax.xml.bind.PropertyException {
		super.setProperty(name, value);
	}

	/**
	 * Create an instance of TaskType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.tasks.TaskType createTaskType()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.tasks.TaskType) newInstance((jcolibri.xml.tasks.TaskType.class)));
	}

	/**
	 * Create an instance of Tasks
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.tasks.Tasks createTasks()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.tasks.Tasks) newInstance((jcolibri.xml.tasks.Tasks.class)));
	}

	/**
	 * Create an instance of Task
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.tasks.Task createTask()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.tasks.Task) newInstance((jcolibri.xml.tasks.Task.class)));
	}

	/**
	 * Create an instance of TasksType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.tasks.TasksType createTasksType()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.tasks.TasksType) newInstance((jcolibri.xml.tasks.TasksType.class)));
	}

	private static class GrammarInfoImpl extends com.sun.xml.bind.GrammarInfo {

		public java.lang.Class getDefaultImplementation(
				java.lang.Class javaContentInterface) {
			return ((java.lang.Class) defaultImplementations
					.get(javaContentInterface));
		}

		public java.lang.Class getRootElement(java.lang.String uri,
				java.lang.String local) {
			if (("" == uri) && ("Task" == local)) {
				return (jcolibri.xml.tasks.impl.TaskImpl.class);
			}
			if (("" == uri) && ("Tasks" == local)) {
				return (jcolibri.xml.tasks.impl.TasksImpl.class);
			}
			return null;
		}

		public java.lang.String[] getProbePoints() {
			return new java.lang.String[] { "", "Task", "", "Tasks" };
		}

	}

}
