//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2004.07.27 at 10:46:52 CEST 
//

package jcolibri.xml.methods;

import javax.xml.bind.JAXBException;
import javax.xml.bind.PropertyException;

/**
 * This object contains factory methods for each Java content interface and Java
 * element interface generated in the jcolibri.xml.methods package.
 * <p>
 * An ObjectFactory allows you to programatically construct new instances of the
 * Java representation for XML content. The Java representation of XML content
 * can consist of schema derived interfaces and classes representing the binding
 * of schema type definitions, element declarations and model groups. Factory
 * methods for each of these are provided in this class.
 * 
 */
public class ObjectFactory extends com.sun.xml.bind.DefaultJAXBContextImpl {

	private static java.util.HashMap defaultImplementations = new java.util.HashMap();

	static {
		defaultImplementations
				.put(
						(jcolibri.xml.methods.ContextOutputPostconditionType.class),
						(jcolibri.xml.methods.impl.ContextOutputPostconditionTypeImpl.class));
		defaultImplementations.put((jcolibri.xml.methods.MethodType.class),
				(jcolibri.xml.methods.impl.MethodTypeImpl.class));
		defaultImplementations.put((jcolibri.xml.methods.Parameter.class),
				(jcolibri.xml.methods.impl.ParameterImpl.class));
		defaultImplementations.put((jcolibri.xml.methods.MethodsType.class),
				(jcolibri.xml.methods.impl.MethodsTypeImpl.class));
		defaultImplementations.put((jcolibri.xml.methods.Parameters.class),
				(jcolibri.xml.methods.impl.ParametersImpl.class));
		defaultImplementations.put((jcolibri.xml.methods.ParameterType.class),
				(jcolibri.xml.methods.impl.ParameterTypeImpl.class));
		defaultImplementations.put((jcolibri.xml.methods.Methods.class),
				(jcolibri.xml.methods.impl.MethodsImpl.class));
		defaultImplementations.put((jcolibri.xml.methods.Type.class),
				(jcolibri.xml.methods.impl.TypeImpl.class));
		defaultImplementations.put(
				(jcolibri.xml.methods.ContextCondition.class),
				(jcolibri.xml.methods.impl.ContextConditionImpl.class));
		defaultImplementations
				.put(
						(jcolibri.xml.methods.ContextInputPreconditionType.class),
						(jcolibri.xml.methods.impl.ContextInputPreconditionTypeImpl.class));
		defaultImplementations.put((jcolibri.xml.methods.SubTasks.class),
				(jcolibri.xml.methods.impl.SubTasksImpl.class));
		defaultImplementations.put(
				(jcolibri.xml.methods.CompetenciesType.class),
				(jcolibri.xml.methods.impl.CompetenciesTypeImpl.class));
		defaultImplementations.put(
				(jcolibri.xml.methods.ContextConditionType.class),
				(jcolibri.xml.methods.impl.ContextConditionTypeImpl.class));
		defaultImplementations.put((jcolibri.xml.methods.SubTasksType.class),
				(jcolibri.xml.methods.impl.SubTasksTypeImpl.class));
		defaultImplementations
				.put(
						(jcolibri.xml.methods.ContextOutputPostcondition.class),
						(jcolibri.xml.methods.impl.ContextOutputPostconditionImpl.class));
		defaultImplementations.put(
				(jcolibri.xml.methods.ContextInputPrecondition.class),
				(jcolibri.xml.methods.impl.ContextInputPreconditionImpl.class));
		defaultImplementations.put((jcolibri.xml.methods.Competencies.class),
				(jcolibri.xml.methods.impl.CompetenciesImpl.class));
		defaultImplementations.put((jcolibri.xml.methods.Method.class),
				(jcolibri.xml.methods.impl.MethodImpl.class));
		defaultImplementations.put((jcolibri.xml.methods.ParametersType.class),
				(jcolibri.xml.methods.impl.ParametersTypeImpl.class));
	}

	/**
	 * Create a new ObjectFactory that can be used to create new instances of
	 * schema derived classes for package: jcolibri.xml.methods
	 * 
	 */
	public ObjectFactory() {
		super(new jcolibri.xml.methods.ObjectFactory.GrammarInfoImpl());
	}

	/**
	 * Create an instance of the specified Java content interface.
	 * 
	 * @param javaContentInterface
	 *            the Class object of the javacontent interface to instantiate
	 * @return a new instance
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public java.lang.Object newInstance(java.lang.Class javaContentInterface)
			throws javax.xml.bind.JAXBException {
		return super.newInstance(javaContentInterface);
	}

	/**
	 * Get the specified property. This method can only be used to get provider
	 * specific properties. Attempting to get an undefined property will result
	 * in a PropertyException being thrown.
	 * 
	 * @param name
	 *            the name of the property to retrieve
	 * @return the value of the requested property
	 * @throws PropertyException
	 *             when there is an error retrieving the given property or value
	 */
	public java.lang.Object getProperty(java.lang.String name)
			throws javax.xml.bind.PropertyException {
		return super.getProperty(name);
	}

	/**
	 * Set the specified property. This method can only be used to set provider
	 * specific properties. Attempting to set an undefined property will result
	 * in a PropertyException being thrown.
	 * 
	 * @param name
	 *            the name of the property to retrieve
	 * @param value
	 *            the value of the property to be set
	 * @throws PropertyException
	 *             when there is an error processing the given property or value
	 */
	public void setProperty(java.lang.String name, java.lang.Object value)
			throws javax.xml.bind.PropertyException {
		super.setProperty(name, value);
	}

	/**
	 * Create an instance of ContextOutputPostconditionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.ContextOutputPostconditionType createContextOutputPostconditionType()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.ContextOutputPostconditionType) newInstance((jcolibri.xml.methods.ContextOutputPostconditionType.class)));
	}

	/**
	 * Create an instance of MethodType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.MethodType createMethodType()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.MethodType) newInstance((jcolibri.xml.methods.MethodType.class)));
	}

	/**
	 * Create an instance of Parameter
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.Parameter createParameter()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.Parameter) newInstance((jcolibri.xml.methods.Parameter.class)));
	}

	/**
	 * Create an instance of MethodsType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.MethodsType createMethodsType()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.MethodsType) newInstance((jcolibri.xml.methods.MethodsType.class)));
	}

	/**
	 * Create an instance of Parameters
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.Parameters createParameters()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.Parameters) newInstance((jcolibri.xml.methods.Parameters.class)));
	}

	/**
	 * Create an instance of ParameterType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.ParameterType createParameterType()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.ParameterType) newInstance((jcolibri.xml.methods.ParameterType.class)));
	}

	/**
	 * Create an instance of Methods
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.Methods createMethods()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.Methods) newInstance((jcolibri.xml.methods.Methods.class)));
	}

	/**
	 * Create an instance of Type
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.Type createType()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.Type) newInstance((jcolibri.xml.methods.Type.class)));
	}

	/**
	 * Create an instance of Type
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.Type createType(java.lang.String value)
			throws javax.xml.bind.JAXBException {
		return new jcolibri.xml.methods.impl.TypeImpl(value);
	}

	/**
	 * Create an instance of ContextCondition
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.ContextCondition createContextCondition()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.ContextCondition) newInstance((jcolibri.xml.methods.ContextCondition.class)));
	}

	/**
	 * Create an instance of ContextInputPreconditionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.ContextInputPreconditionType createContextInputPreconditionType()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.ContextInputPreconditionType) newInstance((jcolibri.xml.methods.ContextInputPreconditionType.class)));
	}

	/**
	 * Create an instance of SubTasks
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.SubTasks createSubTasks()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.SubTasks) newInstance((jcolibri.xml.methods.SubTasks.class)));
	}

	/**
	 * Create an instance of CompetenciesType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.CompetenciesType createCompetenciesType()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.CompetenciesType) newInstance((jcolibri.xml.methods.CompetenciesType.class)));
	}

	/**
	 * Create an instance of ContextConditionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.ContextConditionType createContextConditionType()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.ContextConditionType) newInstance((jcolibri.xml.methods.ContextConditionType.class)));
	}

	/**
	 * Create an instance of SubTasksType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.SubTasksType createSubTasksType()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.SubTasksType) newInstance((jcolibri.xml.methods.SubTasksType.class)));
	}

	/**
	 * Create an instance of ContextOutputPostcondition
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.ContextOutputPostcondition createContextOutputPostcondition()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.ContextOutputPostcondition) newInstance((jcolibri.xml.methods.ContextOutputPostcondition.class)));
	}

	/**
	 * Create an instance of ContextInputPrecondition
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.ContextInputPrecondition createContextInputPrecondition()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.ContextInputPrecondition) newInstance((jcolibri.xml.methods.ContextInputPrecondition.class)));
	}

	/**
	 * Create an instance of Competencies
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.Competencies createCompetencies()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.Competencies) newInstance((jcolibri.xml.methods.Competencies.class)));
	}

	/**
	 * Create an instance of Method
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.Method createMethod()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.Method) newInstance((jcolibri.xml.methods.Method.class)));
	}

	/**
	 * Create an instance of ParametersType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public jcolibri.xml.methods.ParametersType createParametersType()
			throws javax.xml.bind.JAXBException {
		return ((jcolibri.xml.methods.ParametersType) newInstance((jcolibri.xml.methods.ParametersType.class)));
	}

	private static class GrammarInfoImpl extends com.sun.xml.bind.GrammarInfo {

		public java.lang.Class getDefaultImplementation(
				java.lang.Class javaContentInterface) {
			return ((java.lang.Class) defaultImplementations
					.get(javaContentInterface));
		}

		public java.lang.Class getRootElement(java.lang.String uri,
				java.lang.String local) {
			if (("" == uri) && ("Methods" == local)) {
				return (jcolibri.xml.methods.impl.MethodsImpl.class);
			}
			if (("" == uri) && ("Method" == local)) {
				return (jcolibri.xml.methods.impl.MethodImpl.class);
			}
			if (("" == uri) && ("ContextOutputPostcondition" == local)) {
				return (jcolibri.xml.methods.impl.ContextOutputPostconditionImpl.class);
			}
			if (("" == uri) && ("Parameters" == local)) {
				return (jcolibri.xml.methods.impl.ParametersImpl.class);
			}
			if (("" == uri) && ("ContextInputPrecondition" == local)) {
				return (jcolibri.xml.methods.impl.ContextInputPreconditionImpl.class);
			}
			if (("" == uri) && ("Parameter" == local)) {
				return (jcolibri.xml.methods.impl.ParameterImpl.class);
			}
			if (("" == uri) && ("SubTasks" == local)) {
				return (jcolibri.xml.methods.impl.SubTasksImpl.class);
			}
			if (("" == uri) && ("ContextCondition" == local)) {
				return (jcolibri.xml.methods.impl.ContextConditionImpl.class);
			}
			if (("" == uri) && ("Competencies" == local)) {
				return (jcolibri.xml.methods.impl.CompetenciesImpl.class);
			}
			if (("" == uri) && ("Type" == local)) {
				return (jcolibri.xml.methods.impl.TypeImpl.class);
			}
			return null;
		}

		public java.lang.String[] getProbePoints() {
			return new java.lang.String[] { "", "Methods", "", "Method", "",
					"ContextOutputPostcondition", "", "Parameters", "",
					"ContextInputPrecondition", "", "Parameter", "",
					"SubTasks", "", "ContextCondition", "", "Competencies", "",
					"Type" };
		}

	}

}
