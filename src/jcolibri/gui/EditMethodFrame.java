package jcolibri.gui;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import jcolibri.cbrcore.CBRMethod;
import jcolibri.cbrcore.DataType;
import jcolibri.cbrcore.DataTypesRegistry;
import jcolibri.cbrcore.MethodParameter;
import jcolibri.cbrcore.MethodType;
import jcolibri.cbrcore.PrototypeMethodPkgReg;
import jcolibri.cbrcore.PrototypeMethodsRegistry;
import jcolibri.gui.component.OrderableListPanel;
import jcolibri.util.CBRLogger;
import jcolibri.util.ImagesContainer;

/**
 * 
 * @author Juan José Bello
 */
public class EditMethodFrame extends javax.swing.JInternalFrame {
	private static final long serialVersionUID = 1L;

	private boolean editMode;

	private PrototypeMethodPkgReg pmPkgReg;

	private CBRMethod method;

	OrderableListPanel competenciesOrderablePanel;

	OrderableListPanel subtasksOrderablePanel;

	HashMap preConditions = new HashMap();

	HashMap postConditions = new HashMap();

	/** Creates new form AddMethodFrame */
	public EditMethodFrame(boolean editMode, PrototypeMethodPkgReg pmPkgReg,
			CBRMethod method) {
		this.editMode = editMode;
		this.pmPkgReg = pmPkgReg;
		this.method = method;
		initComponents();
		myInitComponents();
	}

	private void myInitComponents() {
		JComboBox comboTypes = new JComboBox(DataTypesRegistry.getInstance()
				.getSupportedTypes());
		paramsTable.getColumn("Type").setCellEditor(
				new DefaultCellEditor(comboTypes));
		competenciesOrderablePanel = new OrderableListPanel();
		subtasksOrderablePanel = new OrderableListPanel();
		competenciesPanel.add(competenciesOrderablePanel,
				java.awt.BorderLayout.CENTER);
		subtasksPanel.add(subtasksOrderablePanel, java.awt.BorderLayout.CENTER);

		nameField.setText(method.getName());
		descriptionArea.setText(method.getInformalDescription());
		updateCompetencies(method.getCompetencies());
		typeCombo.setSelectedItem(method.getMethodType());
		updateSubtasks(method.getSubTasks());
		updateParameters(method.getParametersInfo());
		preConditions = method.getPreConditionsInfo();
		postConditions = method.getPostConditionsInfo();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() { // GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		mainPanel = new javax.swing.JPanel();
		parametersPanel = new javax.swing.JPanel();
		paramsButtonsPanel = new javax.swing.JPanel();
		addParameterButton = new javax.swing.JButton();
		deleteParameterButton = new javax.swing.JButton();
		paramsScrollPane = new javax.swing.JScrollPane();
		paramsTable = new javax.swing.JTable();
		attributesPanel = new javax.swing.JPanel();
		nameLabel = new javax.swing.JLabel();
		nameField = new javax.swing.JTextField();
		descriptionLabel = new javax.swing.JLabel();
		descriptionScrollPane = new javax.swing.JScrollPane();
		descriptionArea = new javax.swing.JTextArea();
		typeLabel = new javax.swing.JLabel();
		typeCombo = new javax.swing.JComboBox();
		competenciesLabel = new javax.swing.JLabel();
		subtasksLabel = new javax.swing.JLabel();
		modCompetenciesLButton = new javax.swing.JLabel();
		modSubtasksLButton = new javax.swing.JLabel();
		competenciesPanel = new javax.swing.JPanel();
		subtasksPanel = new javax.swing.JPanel();
		buttonsPanel = new javax.swing.JPanel();
		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		setConditionsButton = new javax.swing.JButton();
		removeCompetenceTaskButton = new JButton();
		removeDescompTaskButton = new JButton();

		setClosable(true);
		setIconifiable(true);
		setMaximizable(true);
		setResizable(true);
		setTitle("Method");
		mainPanel.setLayout(new java.awt.GridBagLayout());

		parametersPanel.setLayout(new java.awt.BorderLayout());

		parametersPanel.setBorder(new javax.swing.border.TitledBorder(
				"Input parameters"));
		paramsButtonsPanel.setLayout(new java.awt.FlowLayout(
				java.awt.FlowLayout.RIGHT));

		addParameterButton.setIcon(ImagesContainer.NEW);
		addParameterButton.setPreferredSize(new java.awt.Dimension(20, 20));
		addParameterButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						addParameterButtonActionPerformed(evt);
					}
				});

		paramsButtonsPanel.add(addParameterButton);

		deleteParameterButton.setIcon(ImagesContainer.DELETE);
		deleteParameterButton.setPreferredSize(new java.awt.Dimension(20, 20));
		deleteParameterButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						deleteParameterButtonActionPerformed(evt);
					}
				});

		paramsButtonsPanel.add(deleteParameterButton);

		parametersPanel.add(paramsButtonsPanel, java.awt.BorderLayout.NORTH);

		paramsTable.setModel(new ParametersTableModel());
		paramsScrollPane.setViewportView(paramsTable);

		parametersPanel.add(paramsScrollPane, java.awt.BorderLayout.CENTER);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 0.5;
		mainPanel.add(parametersPanel, gridBagConstraints);

		attributesPanel.setLayout(new java.awt.GridBagLayout());

		attributesPanel.setBorder(new javax.swing.border.EmptyBorder(
				new java.awt.Insets(5, 10, 5, 10)));
		nameLabel.setText("Name");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 0.1;
		attributesPanel.add(nameLabel, gridBagConstraints);

		nameField.setColumns(15);
		nameField.addFocusListener(new FocusListener() {
			public void focusGained(FocusEvent e) {

			}

			public void focusLost(FocusEvent e) {
				String aux = nameField.getText();
				if (aux != null && !aux.equals("") && aux.indexOf(".") == -1) {
					nameField.setText(PrototypeMethodsRegistry.METHOD_PACKAGE
							+ aux);
				}
			}

		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		attributesPanel.add(nameField, gridBagConstraints);

		descriptionLabel.setText("Description");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.weightx = 0.1;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		attributesPanel.add(descriptionLabel, gridBagConstraints);

		descriptionArea.setLineWrap(true);
		descriptionArea.setWrapStyleWord(true);
		descriptionScrollPane.setViewportView(descriptionArea);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 0.1;
		attributesPanel.add(descriptionScrollPane, gridBagConstraints);

		typeLabel.setText("Type");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		attributesPanel.add(typeLabel, gridBagConstraints);

		typeCombo.setModel(new DefaultComboBoxModel(new Object[] {
				jcolibri.cbrcore.MethodType.DECOMPOSITION,
				jcolibri.cbrcore.MethodType.RESOLUTION }));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		attributesPanel.add(typeCombo, gridBagConstraints);

		competenciesLabel.setText("Competence(s)");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 0.1;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		attributesPanel.add(competenciesLabel, gridBagConstraints);

		subtasksLabel.setText("Subtasks");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		attributesPanel.add(subtasksLabel, gridBagConstraints);

		modCompetenciesLButton.setText(" ... ");
		modCompetenciesLButton.setToolTipText("Select tasks");
		modCompetenciesLButton.setBorder(new javax.swing.border.EtchedBorder(
				java.awt.Color.darkGray, null));
		modCompetenciesLButton
				.addMouseListener(new java.awt.event.MouseAdapter() {
					public void mouseClicked(java.awt.event.MouseEvent evt) {
						modCompetenciesLButtonMouseClicked(evt);
					}
				});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		attributesPanel.add(modCompetenciesLButton, gridBagConstraints);

		removeCompetenceTaskButton.setIcon(ImagesContainer.DELETE);
		removeCompetenceTaskButton.setPreferredSize(new java.awt.Dimension(20,
				20));
		removeCompetenceTaskButton.setToolTipText("Remove task");
		removeCompetenceTaskButton
				.setBorder(new javax.swing.border.EtchedBorder(
						java.awt.Color.darkGray, null));
		removeCompetenceTaskButton
				.addMouseListener(new java.awt.event.MouseAdapter() {
					public void mouseClicked(java.awt.event.MouseEvent evt) {
						removeCompetenceTaskButtonMouseClicked(evt);
					}
				});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		attributesPanel.add(removeCompetenceTaskButton, gridBagConstraints);

		modSubtasksLButton.setText(" ... ");
		modSubtasksLButton.setToolTipText("Select tasks");
		modSubtasksLButton.setBorder(new javax.swing.border.EtchedBorder(
				java.awt.Color.darkGray, null));
		modSubtasksLButton.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				modSubtasksLButtonMouseClicked(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		attributesPanel.add(modSubtasksLButton, gridBagConstraints);

		removeDescompTaskButton.setIcon(ImagesContainer.DELETE);
		removeDescompTaskButton
				.setPreferredSize(new java.awt.Dimension(20, 20));
		removeDescompTaskButton.setToolTipText("Remove task");
		removeDescompTaskButton.setBorder(new javax.swing.border.EtchedBorder(
				java.awt.Color.darkGray, null));
		removeDescompTaskButton
				.addMouseListener(new java.awt.event.MouseAdapter() {
					public void mouseClicked(java.awt.event.MouseEvent evt) {
						removeDescompTaskButtonMouseClicked(evt);
					}
				});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		attributesPanel.add(removeDescompTaskButton, gridBagConstraints);

		competenciesPanel.setLayout(new java.awt.BorderLayout());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weighty = 0.1;
		attributesPanel.add(competenciesPanel, gridBagConstraints);

		subtasksPanel.setLayout(new java.awt.BorderLayout());

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weighty = 0.1;
		attributesPanel.add(subtasksPanel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 0.5;
		mainPanel.add(attributesPanel, gridBagConstraints);

		getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

		setConditionsButton.setText("Set pre/post conditions...");
		setConditionsButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						setConditionsButtonActionPerformed(evt);
					}
				});

		buttonsPanel.add(setConditionsButton);
		okButton.setText("Ok");

		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		buttonsPanel.add(okButton);

		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		buttonsPanel.add(cancelButton);

		getContentPane().add(buttonsPanel, java.awt.BorderLayout.SOUTH);

		java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit()
				.getScreenSize();
		setBounds((screenSize.width - 500) / 2, (screenSize.height - 500) / 2,
				500, 500);
	} // GEN-END:initComponents

	private void deleteParameterButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		// GEN-FIRST:event_deleteParameterButtonActionPerformed
		int sel = paramsTable.getSelectedRow();
		if (sel != -1)
			((ParametersTableModel) paramsTable.getModel())
					.deleteParameter(sel);
	} // GEN-LAST:event_deleteParameterButtonActionPerformed

	private void addParameterButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		// GEN-FIRST:event_addParameterButtonActionPerformed
		((ParametersTableModel) paramsTable.getModel()).addParameter();
	} // GEN-LAST:event_addParameterButtonActionPerformed

	private void modSubtasksLButtonMouseClicked(java.awt.event.MouseEvent evt) {
		// GEN-FIRST:event_modSubtasksLButtonMouseClicked
		ChooseableTaskListPane pane = new ChooseableTaskListPane();
		pane.createJDialog(null, true, "Select tasks").setVisible(true);
		ArrayList list = pane.getValue();
		updateSubtasks(list);
	} // GEN-LAST:event_modSubtasksLButtonMouseClicked

	private void modCompetenciesLButtonMouseClicked(
			java.awt.event.MouseEvent evt) {
		// GEN-FIRST:event_modCompetenciesLButtonMouseClicked
		ChooseableTaskListPane pane = new ChooseableTaskListPane();
		pane.createJDialog(null, true, "Select tasks").setVisible(true);
		ArrayList list = pane.getValue();
		updateCompetencies(list);
	} // GEN-LAST:event_modCompetenciesLButtonMouseClicked

	private void removeCompetenceTaskButtonMouseClicked(
			java.awt.event.MouseEvent evt) {
		competenciesOrderablePanel.removeSelected();
	}

	private void removeDescompTaskButtonMouseClicked(
			java.awt.event.MouseEvent evt) {
		subtasksOrderablePanel.removeSelected();
	}

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// GEN-FIRST:event_cancelButtonActionPerformed
		this.dispose();
	} // GEN-LAST:event_cancelButtonActionPerformed

	private void setConditionsButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		// GEN-FIRST:event_cancelButtonActionPerformed
		JInternalFrame frame = new AddMethodConditionsPanel(preConditions,
				postConditions);
		this.getDesktopPane().add(frame);
		frame.show();
	} // GEN-LAST:event_setConditionsButtonActionPerformed

	private boolean checkTypeWithSubtasks() {
		MethodType type = (MethodType) typeCombo.getSelectedItem();
		List subtasks = subtasksOrderablePanel.getItems();
		if (type.equals(MethodType.DECOMPOSITION)
				&& (subtasks == null || subtasks.size() == 0))
			return false;
		else
			return true;
	}

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// GEN-FIRST:event_okButtonActionPerformed
		String name = nameField.getText();
		String description = descriptionArea.getText();
		List currentCompetencies = competenciesOrderablePanel.getItems();
		try {
			if (name != null && !name.equals("") && description != null
					&& !description.equals("")
					&& currentCompetencies.size() > 0
					&& checkTypeWithSubtasks()) {
				MethodType type = (MethodType) typeCombo.getSelectedItem();
				List parameters = ((ParametersTableModel) paramsTable
						.getModel()).getParameters();

				method.setName(name);
				method.setInformalDescription(description);
				method.setMethodType(type);
				method.setCompetencies(currentCompetencies);
				method.setSubTasks(subtasksOrderablePanel.getItems());
				method.setParametersInfo(parameters);
				method.setPreConditionsInfo(preConditions);
				method.setPostConditionsInfo(postConditions);
				if (!editMode)
					pmPkgReg.addMethod(method);
				else
					pmPkgReg.notifyChanges();
				pmPkgReg.storeRegistry();
				this.dispose();
			}
		} catch (jcolibri.cbrcore.exception.InternalException ie) {
			CBRLogger.log("jcolibri.gui.AddMethodFrame",
					"okButtonActionPerformed", ie);
			JOptionPane.showMessageDialog(this, "Error while storing methods",
					"Error", JOptionPane.ERROR_MESSAGE);
		}
	} // GEN-LAST:event_okButtonActionPerformed

	private void updateSubtasks(List list) {
		subtasksOrderablePanel.setData(list);
	}

	private void updateCompetencies(List list) {
		competenciesOrderablePanel.setData(list);
	}

	private void updateParameters(List list) {
		ParametersTableModel paramTbMdl;

		paramTbMdl = (ParametersTableModel) paramsTable.getModel();
		paramTbMdl.clearParameters();
		if (list != null)
			paramTbMdl.addParameters(list);
	}

	class ParametersTableModel extends DefaultTableModel {
		private static final long serialVersionUID = 1L;

		ArrayList list = new ArrayList();

		String[] columns = new String[] { "Name", "Description", "Type" };

		public ParametersTableModel() {
		}

		public Object getValueAt(int row, int column) {
			MethodParameter methodParam;
			methodParam = (MethodParameter) list.get(row);
			switch (column) {
			case 0:
				return methodParam.getName();
			case 1:
				return methodParam.getDescription();
			case 2:
				return methodParam.getType().getName();
			default:
				return null;
			}
		}

		public void setValueAt(Object value, int row, int column) {
			MethodParameter methodParam;
			DataType dataType;

			methodParam = (MethodParameter) list.get(row);
			switch (column) {
			case 0:
				methodParam.setName((String) value);
				break;
			case 1:
				methodParam.setDescription((String) value);
				break;
			case 2:
				dataType = DataTypesRegistry.getInstance().getDataType(
						(String) value);
				if (dataType != null)
					methodParam.setType(dataType);
				break;
			}
		}

		public boolean isCellEditable(int row, int column) {
			return true;
		}

		public int getRowCount() {
			return (list == null ? 0 : list.size());
		}

		public int getColumnCount() {
			return columns.length;
		}

		public String getColumnName(int col) {
			return columns[col];
		}

		public List getParameters() {
			return list;
		}

		public void addParameter() {
			addParameter(new MethodParameter("", "", DataTypesRegistry
					.getCBRTERMDataType()));
		}

		public void deleteParameter(int index) {
			list.remove(index);
			fireTableDataChanged();
		}

		public void addParameter(MethodParameter param) {
			list.add(param);
			fireTableDataChanged();
		}

		public void clearParameters() {
			list.clear();
			fireTableDataChanged();
		}

		public void addParameters(Collection params) {
			Iterator it;

			it = params.iterator();
			while (it.hasNext()) {
				list.add(it.next());
			}
			fireTableDataChanged();
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton addParameterButton;

	private javax.swing.JPanel attributesPanel;

	private javax.swing.JPanel buttonsPanel;

	private javax.swing.JButton cancelButton;

	private javax.swing.JLabel competenciesLabel;

	private javax.swing.JPanel competenciesPanel;

	private javax.swing.JButton deleteParameterButton;

	private javax.swing.JTextArea descriptionArea;

	private javax.swing.JLabel descriptionLabel;

	private javax.swing.JScrollPane descriptionScrollPane;

	private javax.swing.JPanel mainPanel;

	private javax.swing.JLabel modCompetenciesLButton;

	private javax.swing.JLabel modSubtasksLButton;

	private javax.swing.JTextField nameField;

	private javax.swing.JLabel nameLabel;

	private javax.swing.JButton okButton;

	private javax.swing.JButton setConditionsButton;

	private javax.swing.JPanel parametersPanel;

	private javax.swing.JPanel paramsButtonsPanel;

	private javax.swing.JScrollPane paramsScrollPane;

	private javax.swing.JTable paramsTable;

	private javax.swing.JLabel subtasksLabel;

	private javax.swing.JPanel subtasksPanel;

	private javax.swing.JComboBox typeCombo;

	private javax.swing.JLabel typeLabel;

	private JButton removeCompetenceTaskButton;

	private JButton removeDescompTaskButton;
	// End of variables declaration//GEN-END:variables

}
